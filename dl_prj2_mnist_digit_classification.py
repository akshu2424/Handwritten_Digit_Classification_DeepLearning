# -*- coding: utf-8 -*-
"""DL prj2 . MNIST Digit classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11XIse_wp06qjldZg9zbI1_RQ_-LiQzDP

# **MNIST Handwritten Digit Classification using DL (Neural Network)**

Importing dependencies

*   List item
*   List item
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras
from keras.datasets import mnist #MNIST is the dataset of machine learning
from tensorflow.math import confusion_matrix

"""Loading the MNIST data from keras.datasets"""

(X_train ,Y_train),(X_test,Y_test)=mnist.load_data()

type(X_train)

#shape of the numpy arrays
print(X_train.shape,Y_train.shape,X_test.shape,Y_test.shape)

"""Trainnig data = 60,000 images

Test data = 10 k images

Image dimension 28 x 28

Grayscale Image --> 1 channel

"""

#printing the 10th image
print(X_train[10])

print(X_train[10].shape)

#displaying the image

plt.imshow(X_train[25])
plt.show()

#printing the corresponding label
print(Y_train[25])

"""Image labels"""

print(Y_train.shape, Y_test.shape)

#printing unique values in Y_train
print(np.unique(Y_train))

# unique values in Y_test
print(np.unique(Y_test))

"""We can use these labels as such or we can also apply One Hot Encoding

All the images have the same dimensions in this dataset, If not, we have to resize all the images to a common dimension
"""

# scaling the values

X_train = X_train/255
X_test = X_test/255

#because max value in the matricx id 255 and min is zero and we want it in same range
#and we are creatindg range 0 to 1 as max value is 255 therefore 255/255=1 and other values vary in between

# printing the 10th image

print(X_train[10])

"""**Building the Neural Network**"""

#setting up the layers of the Neural Network

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),
    keras.layers.Dense(50,activation='relu'),
    keras.layers.Dense(50,activation='relu'),
    keras.layers.Dense(10,activation='sigmoid')
])

#compiling the Neural Network
model.compile(
    optimizer='adam',
    loss = 'sparse_categorical_crossentropy',
    metrics=['accuracy']
)

model.fit(X_train,Y_train,epochs=11)

"""epoch means how many number times our Neural Network go through the data

Training data accuracy = 99.42 %

**Accuracy on Test data**
"""

loss,accuracy = model.evaluate(X_test,Y_test)
print(accuracy," ",loss)

print(X_test.shape)

# first data point in X_test
plt.imshow(X_test[0])
plt.show()

print(Y_test[0])

Y_pred = model.predict(X_test)

print(Y_pred.shape)

print(Y_pred[0])

"""in above it is predicting for 1st input that is X_test[0] and it is giving probability for each number from 0 to 9 and whichever id high that is our ans"""

label_for_first = np.argmax(Y_pred[0]);
print (label_for_first)

# converting the prediction probabilities to class label for all test data points

Y_pred_labels = [np.argmax(i) for i in Y_pred]
print(Y_pred_labels)

"""Y_test --> True labels

Y_pred_labels --> Predicted Labels

Confusion Matrix
"""

conf_mat = confusion_matrix(Y_test,Y_pred_labels)

print(conf_mat)

plt.figure(figsize=(15,7))
sns.heatmap(conf_mat,annot=True,fmt='d',cmap="Blues")
plt.ylabel('True Lables')
plt.xlabel('Predicted Lables')

"""Building a Predictive System"""

img = cv2.imread('/content/MNIST_digit_DL_prj2.png')

type(img)

print(img)

cv2_imshow(img)

img.shape

#Resize the image
img_resized = cv2.resize(img,(28,28))

print(img_resized.shape)

cv2_imshow(img_resized)

grayscale = cv2.cvtColor(img_resized,cv2.COLOR_RGB2GRAY)

type(grayscale)

cv2_imshow(grayscale)

cv2.imwrite('gr.jpg',grayscale)
cv2.imwrite('org.jpg',img_resized)

"""here in above we took only data now we want to do all steps we do with training data"""

#for values in same range because our model for that data range

grayscale = grayscale/255

image_reshaped = np.reshape(grayscale,[1,28,28])

#before in reshaping we give 1,-1 to tell that we are giving only one value
#similarly here 1 indicate we are giving only one input with the size
#also if we are giving rgb image we need to mension 1,28,28,3

input_prediction = model.predict(image_reshaped)
print(input_prediction)

input_pred_label = np.argmax(input_prediction)
print(input_pred_label)

"""**Predictive System**"""

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

grayscale = cv2.cvtColor(input_image, cv2.COLOR_RGB2GRAY)

input_image_resize = cv2.resize(grayscale, (28, 28))

input_image_resize = input_image_resize/255

image_reshaped = np.reshape(input_image_resize, [1,28,28])

input_prediction = model.predict(image_reshaped)

input_pred_label = np.argmax(input_prediction)

print('The Handwritten Digit is recognised as ', input_pred_label)

